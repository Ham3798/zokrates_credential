import "hashes/sha256/512bitPacked" as sha256packed;
import "hashes/sha256/1024bitPadded" as sha256;
import "utils/pack/bool/nonStrictUnpack256" as unpack256bool;
import "utils/pack/u32/nonStrictUnpack256" as unpack256u;
import "utils/casts/u32_8_to_bool_256";

struct BabyJubJubParams {
	field JUBJUB_C;
	field JUBJUB_A;
	field JUBJUB_D;
	field MONT_A;
	field MONT_B;
	field[2] INFINITY;
	field Gu;
	field Gv;
}

const BabyJubJubParams BABYJUBJUB_PARAMS = BabyJubJubParams {
    // Order of the curve for reference: 21888242871839275222246405745257275088614511777268538073601725287587578984328
    JUBJUB_C: 8, // Cofactor
    JUBJUB_A: 168700, // Coefficient A
    JUBJUB_D: 168696, // Coefficient D

    // Montgomery parameters
    MONT_A: 168698,
    MONT_B: 1,

    // Point at infinity
    INFINITY: [0, 1],

    // Generator
    Gu: 16540640123574156134436876038791482806971768689494387082833631921987005038935,
    Gv: 20819045374670962167435360035096875258406992893633759881276124905556507972311
};

def add(field[2] pt1, field[2] pt2, BabyJubJubParams context) -> field[2] {

    field a = context.JUBJUB_A;
    field d = context.JUBJUB_D;

    field u1 = pt1[0];
    field v1 = pt1[1];
    field u2 = pt2[0];
    field v2 = pt2[1];

    field uOut = (u1*v2 + v1*u2) / (1 + d*u1*u2*v1*v2);
    field vOut = (v1*v2 - a*u1*u2) / (1 - d*u1*u2*v1*v2);

    return [uOut, vOut];
}

def onCurve(field[2] pt, BabyJubJubParams context) -> bool {
    field a = context.JUBJUB_A;
    field d = context.JUBJUB_D;

    field uu = pt[0] * pt[0];
    field vv = pt[1] * pt[1];
    field uuvv = uu * vv;

    assert(a * uu + vv == 1 + d * uuvv);
    return true;
}

def scalarMult(bool[256] exponent, field[2] pt, BabyJubJubParams context) -> field[2] {
    field[2] infinity = context.INFINITY;

    field[2] mut doubledP = pt;
    field[2] mut accumulatedP = infinity;

    for u32 i in 0..256 {
        u32 j = 255 - i;
        field[2] candidateP = add(accumulatedP, doubledP, context);
        accumulatedP = exponent[j] ? candidateP : accumulatedP;
        doubledP = add(doubledP, doubledP, context);
    }

    assert(onCurve(accumulatedP, context));
    return accumulatedP;
}

def orderCheck(field[2] pt, BabyJubJubParams context) -> bool {
    field cofactor = context.JUBJUB_C;
    assert(cofactor == 8);

    // Co-factor currently hard-coded to 8 for efficiency reasons
    // See discussion here: https://github.com/Zokrates/ZoKrates/pull/301#discussion_r267203391
    // Generic code:
    // bool[256] cofactorExponent = unpack256(cofactor);
    // field[2] ptExp = multiply(cofactorExponent, pt, context);
    field[2] mut ptExp = add(pt, pt, context); // 2*pt
    ptExp = add(ptExp, ptExp, context);    // 4*pt
    ptExp = add(ptExp, ptExp, context);    // 8*pt

    return !(ptExp[0] == 0 && ptExp[1] == 1);
}

def verifyEddsa(field[2] R, field S, field[2] A, u32[8] M0, u32[8] M1, BabyJubJubParams context) -> bool {
    field[2] G = [context.Gu, context.Gv];

    // Check if R is on curve and if it is not in a small subgroup. A is public input and can be checked offline
    assert(onCurve(R, context)); // throws if R is not on curve
    assert(orderCheck(R, context));

    u32[8] Rx = unpack256u(R[0]);
    u32[8] Ax = unpack256u(A[0]);
    bool[256] hRAM = u32_8_to_bool_256(sha256(Rx, Ax, M0, M1));

    bool[256] sBits = unpack256bool(S);
    field[2] lhs = scalarMult(sBits, G, context);

    field[2] AhRAM = scalarMult(hRAM, A, context);
    field[2] rhs = add(R, AhRAM, context);

    bool out = rhs[0] == lhs[0] && rhs[1] == lhs[1];
    return out;
}

// main 함수 위의 모든 함수들은 조크라테스 기본 라이브러리에서 제공되는 코드들입니다.
// 무슨 이유인지 라이브러리 임포트가 안돼서 수동으로 불러왔습니다.
def main(private field context_hash, private field age, private field alumni_of_hash, private field credential_subject_hash, private field exp_hash, private field id_hash, private field issuance_date_hash, private field issuer_hash, private field name_hash, private field student_number_hash, private field type_hash, private field context_hash2, private field age2, private field alumni_of_hash2, private field credential_subject_hash2, private field exp_hash2, private field id_hash2, private field issuance_date_hash2, private field issuer_hash2, private field name_hash2, private field student_number_hash2, private field type_hash2,private field context_hash3, private field age3, private field alumni_of_hash3, private field credential_subject_hash3, private field exp_hash3, private field id_hash3, private field issuance_date_hash3, private field issuer_hash3, private field name_hash3, private field student_number_hash3, private field type_hash3,private field context_hash4, private field age4, private field alumni_of_hash4, private field credential_subject_hash4, private field exp_hash4, private field id_hash4, private field issuance_date_hash4, private field issuer_hash4, private field name_hash4, private field student_number_hash4, private field type_hash4,private field context_hash5, private field age5, private field alumni_of_hash5, private field credential_subject_hash5, private field exp_hash5, private field id_hash5, private field issuance_date_hash5, private field issuer_hash5, private field name_hash5, private field student_number_hash5, private field type_hash5, private field[2] R, private field S) {
    // 첫 번째 4개 입력에 대한 해시 계산
    field[2] first_hash = sha256packed([context_hash, age, alumni_of_hash, credential_subject_hash]);
    
    // 두 번째 4개 입력에 대한 해시 계산
    field[2] second_hash = sha256packed([exp_hash, id_hash, issuance_date_hash, issuer_hash]);

    // 세 번째 3개 입력 및 첫 번째 해시의 첫 요소에 대한 해시 계산
    // 세 번째 해시 계산에는 name_hash, student_number_hash, type_hash 및 first_hash의 첫 요소를 사용
    field[2] third_hash = sha256packed([name_hash, student_number_hash, type_hash, first_hash[0]]);
    
    // 첫 번째, 두 번째, 세 번째 해시 결과의 두 번째 요소들을 다시 해시하여 최종 해시를 계산
    field[2] final_hash = sha256packed([second_hash[1], third_hash[1], third_hash[0], first_hash[1]]);
    
    // final_hash의 각 field 요소를 u32[8] 타입으로 변환
    u32[8] M0 = unpack256u(final_hash[0]);
    u32[8] M1 = unpack256u(final_hash[1]);

    // Eddsa 서명 검증
    // 서명 :(R, S), 공개키 : A, Memo : M0, M1
    // 공개키는 issuer의 pk 파일의 값으로 바꿀 것
    field[2] A = [14897476871502190904409029696666322856887678969656209656241038339251270171395, 16668832459046858928951622951481252834155254151733002984053501254009901876174];
    bool signature_valid = verifyEddsa(R, S, A, M0, M1, BABYJUBJUB_PARAMS);
    assert(signature_valid == true);
     // 나이가 20살 이상인지 검사
    assert(age >= 20);

    // 첫 번째 4개 입력에 대한 해시 계산
    field[2] first_hash2 = sha256packed([context_hash2, age2, alumni_of_hash2, credential_subject_hash2]);
    
    // 두 번째 4개 입력에 대한 해시 계산
    field[2] second_hash2 = sha256packed([exp_hash2, id_hash2, issuance_date_hash2, issuer_hash2]);

    // 세 번째 3개 입력 및 첫 번째 해시의 첫 요소에 대한 해시 계산
    // 세 번째 해시 계산에는 name_hash, student_number_hash, type_hash 및 first_hash의 첫 요소를 사용
    field[2] third_hash2 = sha256packed([name_hash2, student_number_hash2, type_hash2, first_hash2[0]]);
    
    // 첫 번째, 두 번째, 세 번째 해시 결과의 두 번째 요소들을 다시 해시하여 최종 해시를 계산
    field[2] final_hash2 = sha256packed([second_hash2[1], third_hash2[1], third_hash2[0], first_hash2[1]]);
    
    // final_hash의 각 field 요소를 u32[8] 타입으로 변환
    u32[8] M02 = unpack256u(final_hash2[0]);
    u32[8] M12 = unpack256u(final_hash2[1]);
    

    bool signature_valid2 = verifyEddsa(R, S, A, M02, M12, BABYJUBJUB_PARAMS);
    assert(signature_valid2 == true);

    // 첫 번째 4개 입력에 대한 해시 계산
    field[2] first_hash3 = sha256packed([context_hash3, age3, alumni_of_hash3, credential_subject_hash3]);
    
    // 두 번째 4개 입력에 대한 해시 계산
    field[2] second_hash3 = sha256packed([exp_hash3, id_hash3, issuance_date_hash3, issuer_hash3]);

    // 세 번째 3개 입력 및 첫 번째 해시의 첫 요소에 대한 해시 계산
    // 세 번째 해시 계산에는 name_hash, student_number_hash, type_hash 및 first_hash의 첫 요소를 사용
    field[2] third_hash3 = sha256packed([name_hash3, student_number_hash3, type_hash3, first_hash3[0]]);
    
    // 첫 번째, 두 번째, 세 번째 해시 결과의 두 번째 요소들을 다시 해시하여 최종 해시를 계산
    field[2] final_hash3 = sha256packed([second_hash3[1], third_hash3[1], third_hash3[0], first_hash3[1]]);
    
    // final_hash의 각 field 요소를 u32[8] 타입으로 변환
    u32[8] M03 = unpack256u(final_hash3[0]);
    u32[8] M13 = unpack256u(final_hash3[1]);
    

    bool signature_valid3 = verifyEddsa(R, S, A, M03, M13, BABYJUBJUB_PARAMS);
    assert(signature_valid3 == true);

    field[2] first_hash4 = sha256packed([context_hash4, age4, alumni_of_hash4, credential_subject_hash4]);
    
    field[2] second_hash4 = sha256packed([exp_hash4, id_hash4, issuance_date_hash4, issuer_hash4]);

    field[2] third_hash4 = sha256packed([name_hash4, student_number_hash4, type_hash4, first_hash4[0]]);
    
    field[2] final_hash4 = sha256packed([second_hash4[1], third_hash4[1], third_hash4[0], first_hash4[1]]);
    
    u32[8] M04 = unpack256u(final_hash4[0]);
    u32[8] M14 = unpack256u(final_hash4[1]);
    

    bool signature_valid4 = verifyEddsa(R, S, A, M04, M14, BABYJUBJUB_PARAMS);
    assert(signature_valid4 == true);


    field[2] first_hash5 = sha256packed([context_hash5, age5, alumni_of_hash5, credential_subject_hash5]);
    
    field[2] second_hash5 = sha256packed([exp_hash5, id_hash5, issuance_date_hash5, issuer_hash5]);

    field[2] third_hash5 = sha256packed([name_hash5, student_number_hash5, type_hash5, first_hash5[0]]);
    
    field[2] final_hash5 = sha256packed([second_hash5[1], third_hash5[1], third_hash5[0], first_hash5[1]]);
    
    u32[8] M05 = unpack256u(final_hash5[0]);
    u32[8] M15 = unpack256u(final_hash5[1]);
    

    bool signature_valid5 = verifyEddsa(R, S, A, M05, M15, BABYJUBJUB_PARAMS);
    assert(signature_valid5 == true);
    return;

}
